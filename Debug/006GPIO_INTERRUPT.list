
006GPIO_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000478  08000478  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000478  08000478  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000478  08000478  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000478  08000478  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000478  08000478  00010478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800047c  0800047c  0001047c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000001c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000221  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000d4  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00020338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  000203a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000fdc  00000000  00000000  000203f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004b4  00000000  00000000  000213cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000407d  00000000  00000000  00021880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000258fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000f0  00000000  00000000  00025950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000460 	.word	0x08000460

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08000460 	.word	0x08000460

080001c8 <main>:
uint32_t *pGpioModeReg = (uint32_t*)GPIO_MOD_REG_ADDR;
/*creating a pointer pointing to the Interrupt mask register 1 (EXTI_IMR1) */
uint32_t volatile *pIntMaskReg = (uint32_t*) INT_MASK_REG_ADDR;

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	Analyzer_clock_init();
 80001cc:	f000 f808 	bl	80001e0 <Analyzer_clock_init>
	LED_blink_init();
 80001d0:	f000 f84c 	bl	800026c <LED_blink_init>
	Button_init();
 80001d4:	f000 f8a0 	bl	8000318 <Button_init>
 80001d8:	2300      	movs	r3, #0

}
 80001da:	4618      	mov	r0, r3
 80001dc:	bd80      	pop	{r7, pc}
	...

080001e0 <Analyzer_clock_init>:



void Analyzer_clock_init(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b087      	sub	sp, #28
 80001e4:	af00      	add	r7, sp, #0

	/*creating a pointer pointing to the RCC CFG REGISTER*/
	uint32_t *pRccCfgrReg = (uint32_t*) RCC_CFG_REG_ADDR; //
 80001e6:	4b1d      	ldr	r3, [pc, #116]	; (800025c <Analyzer_clock_init+0x7c>)
 80001e8:	617b      	str	r3, [r7, #20]

	//1. Configure the clock configuration register (RCC_CFGR) MCOSEL to select the HSI as clock source and prescaler as 2
	*pRccCfgrReg &= ~(15 << 24); //clearing the bit fields for MCOSEL
 80001ea:	697b      	ldr	r3, [r7, #20]
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80001f2:	697b      	ldr	r3, [r7, #20]
 80001f4:	601a      	str	r2, [r3, #0]
	*pRccCfgrReg |= (35 << 24); //writing the configuration for HSI that is 0011 and the prescaler divided by 4 that is 010
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f043 520c 	orr.w	r2, r3, #587202560	; 0x23000000
 80001fe:	697b      	ldr	r3, [r7, #20]
 8000200:	601a      	str	r2, [r3, #0]

	/*creating a pointer pointing to the AHB2 ENABLE REGISTER*/
	uint32_t *pAhb2EnReg = (uint32_t*) AHB2_EN_RC_ADDR;
 8000202:	4b17      	ldr	r3, [pc, #92]	; (8000260 <Analyzer_clock_init+0x80>)
 8000204:	613b      	str	r3, [r7, #16]

	//2. Configure PA8 to AF0 mode to behave as MCO signal

	//a ) Enable the peripheral clock for GPIOA peripheral
	*pAhb2EnReg |= (1 << 0);
 8000206:	693b      	ldr	r3, [r7, #16]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f043 0201 	orr.w	r2, r3, #1
 800020e:	693b      	ldr	r3, [r7, #16]
 8000210:	601a      	str	r2, [r3, #0]

	//b ) Configure the mode of GPIOA pin 8 as alternate function mode
	uint32_t *pGpioModeReg = (uint32_t*)GPIO_MOD_REG_ADDR;
 8000212:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000216:	60fb      	str	r3, [r7, #12]
	*pGpioModeReg &= ~(3 << 16); //clearing the bit fields for MODE8
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	601a      	str	r2, [r3, #0]
	*pGpioModeReg |= (2 << 16); //writing the configuration for Alternate mode in mode 8
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	601a      	str	r2, [r3, #0]

	//c ) Configure the alternation function high register to set the mode 0 for PA8
	uint32_t *pGpioAltModeReg = (uint32_t*)(GPIOA_BASE_ADDR + GPIO_ALTFUNCHIGH_MOD_REG_OFFSET);
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <Analyzer_clock_init+0x84>)
 8000232:	60bb      	str	r3, [r7, #8]
	*pGpioAltModeReg &= ~(15 << 0); //clearing the bit fields for AFSEL8 AND writing the configuration for AFSEL8
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	f023 020f 	bic.w	r2, r3, #15
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	601a      	str	r2, [r3, #0]


	//e ) Turn on HSI peripheral clock
	uint32_t *pRCC_CR = (uint32_t*)(RCC_BASE_ADDR + 0x00); //Clock control register (RCC_CR) = 0x00
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <Analyzer_clock_init+0x88>)
 8000242:	607b      	str	r3, [r7, #4]
	*pRCC_CR |= (1U << 8);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	601a      	str	r2, [r3, #0]

}
 8000250:	bf00      	nop
 8000252:	371c      	adds	r7, #28
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	40021008 	.word	0x40021008
 8000260:	4002104c 	.word	0x4002104c
 8000264:	48000024 	.word	0x48000024
 8000268:	40021000 	.word	0x40021000

0800026c <LED_blink_init>:

void LED_blink_init(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
	*pGpioModeReg &= ~(3 << 10); //clearing the bit fields for MODE8
 8000270:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <LED_blink_init+0x40>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <LED_blink_init+0x40>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800027e:	601a      	str	r2, [r3, #0]
	*pGpioModeReg |= (1 << 10); //writing the configuration for Alternate mode in mode 8
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <LED_blink_init+0x40>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <LED_blink_init+0x40>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800028e:	601a      	str	r2, [r3, #0]

	// TURNING ON LD2
	*pGpioaSetResetReg |= (1 << 5);
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <LED_blink_init+0x44>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <LED_blink_init+0x44>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f042 0220 	orr.w	r2, r2, #32
 800029e:	601a      	str	r2, [r3, #0]
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000004 	.word	0x20000004
 80002b0:	20000000 	.word	0x20000000

080002b4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
	// Configure the mode of GPIOA pin 5 as output
	uint32_t *pGpioModeReg = (uint32_t*)GPIO_MOD_REG_ADDR;
 80002ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002be:	607b      	str	r3, [r7, #4]
	*pGpioModeReg &= ~(3 << 10); //clearing the bit fields for PIN A5
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	601a      	str	r2, [r3, #0]
	*pGpioModeReg |= (1 << 10); //writing the configuration for PIN A5
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]

	*pGpioaSetResetReg |= (0 << 5);
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <EXTI0_IRQHandler+0x5c>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <EXTI0_IRQHandler+0x5c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	6812      	ldr	r2, [r2, #0]
 80002e2:	601a      	str	r2, [r3, #0]
	*pGpioaSetResetReg |= (1 << 21);
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <EXTI0_IRQHandler+0x5c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <EXTI0_IRQHandler+0x5c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80002f2:	601a      	str	r2, [r3, #0]

	// clearing pending register
	uint32_t *pPendingReg = (uint32_t*)PENDING_REG_ADDR;
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <EXTI0_IRQHandler+0x60>)
 80002f6:	603b      	str	r3, [r7, #0]
	*pPendingReg |= (1 << 0);
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f043 0201 	orr.w	r2, r3, #1
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	601a      	str	r2, [r3, #0]
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	20000000 	.word	0x20000000
 8000314:	40010414 	.word	0x40010414

08000318 <Button_init>:

void Button_init(void)
{
 8000318:	b480      	push	{r7}
 800031a:	b087      	sub	sp, #28
 800031c:	af00      	add	r7, sp, #0
	/*creating a pointer pointing to the AHB2 ENABLE REGISTER*/
	uint32_t volatile *pAhb2EnReg = (uint32_t*) AHB2_EN_RC_ADDR;
 800031e:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <Button_init+0x90>)
 8000320:	617b      	str	r3, [r7, #20]

	//a ) Enable the peripheral clock for GPIOB peripheral
	*pAhb2EnReg |= (1 << 1);
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f043 0202 	orr.w	r2, r3, #2
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	601a      	str	r2, [r3, #0]

	/*creating a pointer pointing to the GPIOB MODE REGISTER */
	uint32_t volatile *pGpiobModeReg = (uint32_t*) GPIOB_MOD_REG_ADDR;
 800032e:	4b1f      	ldr	r3, [pc, #124]	; (80003ac <Button_init+0x94>)
 8000330:	613b      	str	r3, [r7, #16]

	/*Setting Input mode to pin B0 */
	*pGpiobModeReg &= ~(3 << 0);
 8000332:	693b      	ldr	r3, [r7, #16]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f023 0203 	bic.w	r2, r3, #3
 800033a:	693b      	ldr	r3, [r7, #16]
 800033c:	601a      	str	r2, [r3, #0]

	/*creating a pointer pointing to the APB2 ENABLE REGISTER*/
	uint32_t volatile *pApb2EnReg = (uint32_t*) APB2_EN_ADDR;
 800033e:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <Button_init+0x98>)
 8000340:	60fb      	str	r3, [r7, #12]

	/*Setting SYSCFGEN to 1 in order to be able to write the configurations of syscfg*/
	*pApb2EnReg |= (1 << 0);
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f043 0201 	orr.w	r2, r3, #1
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	601a      	str	r2, [r3, #0]

	/*creating a pointer pointing to the SYSCFG external interrupt configuration register 1 */
	uint32_t volatile *pSysCfgReg = (uint32_t*) SYSCFG_EXTICR1_ADDR;
 800034e:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <Button_init+0x9c>)
 8000350:	60bb      	str	r3, [r7, #8]

	/*Clearing EXTI0 */
	*pSysCfgReg &= ~(15 << 0);
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f023 020f 	bic.w	r2, r3, #15
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	601a      	str	r2, [r3, #0]
	/*Setting EXTI0 to use PB0 as output */
	*pSysCfgReg |= (1 << 0);
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f043 0201 	orr.w	r2, r3, #1
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	601a      	str	r2, [r3, #0]

	/*Setting interrupt for EXT10*/
	*pIntMaskReg |= (1 << 0);
 800036a:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <Button_init+0xa0>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <Button_init+0xa0>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f042 0201 	orr.w	r2, r2, #1
 8000378:	601a      	str	r2, [r3, #0]

	/*creating a pointer pointing to the Rising trigger selection register 1 (EXTI_RTSR1) */
	uint32_t volatile *pRisingTriggerReg= (uint32_t*) RISING_TRIGGER_ADDR;
 800037a:	4b10      	ldr	r3, [pc, #64]	; (80003bc <Button_init+0xa4>)
 800037c:	607b      	str	r3, [r7, #4]
	/*Setting interrupt for EXT10*/
	*pRisingTriggerReg |= (1 << 0);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f043 0201 	orr.w	r2, r3, #1
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	601a      	str	r2, [r3, #0]

	/*NVIC irq enable */
	uint32_t volatile *pNVICEnReg= (uint32_t*) NVICIRQEnReg;
 800038a:	4b0d      	ldr	r3, [pc, #52]	; (80003c0 <Button_init+0xa8>)
 800038c:	603b      	str	r3, [r7, #0]
	*pNVICEnReg |= (1 << 6);
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	601a      	str	r2, [r3, #0]

}
 800039a:	bf00      	nop
 800039c:	371c      	adds	r7, #28
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	4002104c 	.word	0x4002104c
 80003ac:	48000400 	.word	0x48000400
 80003b0:	40021060 	.word	0x40021060
 80003b4:	40010008 	.word	0x40010008
 80003b8:	20000008 	.word	0x20000008
 80003bc:	40010408 	.word	0x40010408
 80003c0:	e000e100 	.word	0xe000e100

080003c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c4:	480d      	ldr	r0, [pc, #52]	; (80003fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003cc:	480c      	ldr	r0, [pc, #48]	; (8000400 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ce:	490d      	ldr	r1, [pc, #52]	; (8000404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d0:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <LoopForever+0xe>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d4:	e002      	b.n	80003dc <LoopCopyDataInit>

080003d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003da:	3304      	adds	r3, #4

080003dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e0:	d3f9      	bcc.n	80003d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e2:	4a0a      	ldr	r2, [pc, #40]	; (800040c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e4:	4c0a      	ldr	r4, [pc, #40]	; (8000410 <LoopForever+0x16>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e8:	e001      	b.n	80003ee <LoopFillZerobss>

080003ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ec:	3204      	adds	r2, #4

080003ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f0:	d3fb      	bcc.n	80003ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003f2:	f000 f811 	bl	8000418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f6:	f7ff fee7 	bl	80001c8 <main>

080003fa <LoopForever>:

LoopForever:
  b LoopForever
 80003fa:	e7fe      	b.n	80003fa <LoopForever>
  ldr   r0, =_estack
 80003fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000404:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000408:	08000480 	.word	0x08000480
  ldr r2, =_sbss
 800040c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000410:	20000028 	.word	0x20000028

08000414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000414:	e7fe      	b.n	8000414 <ADC1_2_IRQHandler>
	...

08000418 <__libc_init_array>:
 8000418:	b570      	push	{r4, r5, r6, lr}
 800041a:	4d0d      	ldr	r5, [pc, #52]	; (8000450 <__libc_init_array+0x38>)
 800041c:	4c0d      	ldr	r4, [pc, #52]	; (8000454 <__libc_init_array+0x3c>)
 800041e:	1b64      	subs	r4, r4, r5
 8000420:	10a4      	asrs	r4, r4, #2
 8000422:	2600      	movs	r6, #0
 8000424:	42a6      	cmp	r6, r4
 8000426:	d109      	bne.n	800043c <__libc_init_array+0x24>
 8000428:	4d0b      	ldr	r5, [pc, #44]	; (8000458 <__libc_init_array+0x40>)
 800042a:	4c0c      	ldr	r4, [pc, #48]	; (800045c <__libc_init_array+0x44>)
 800042c:	f000 f818 	bl	8000460 <_init>
 8000430:	1b64      	subs	r4, r4, r5
 8000432:	10a4      	asrs	r4, r4, #2
 8000434:	2600      	movs	r6, #0
 8000436:	42a6      	cmp	r6, r4
 8000438:	d105      	bne.n	8000446 <__libc_init_array+0x2e>
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000440:	4798      	blx	r3
 8000442:	3601      	adds	r6, #1
 8000444:	e7ee      	b.n	8000424 <__libc_init_array+0xc>
 8000446:	f855 3b04 	ldr.w	r3, [r5], #4
 800044a:	4798      	blx	r3
 800044c:	3601      	adds	r6, #1
 800044e:	e7f2      	b.n	8000436 <__libc_init_array+0x1e>
 8000450:	08000478 	.word	0x08000478
 8000454:	08000478 	.word	0x08000478
 8000458:	08000478 	.word	0x08000478
 800045c:	0800047c 	.word	0x0800047c

08000460 <_init>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr

0800046c <_fini>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr
